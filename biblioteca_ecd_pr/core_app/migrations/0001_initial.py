# Generated by Django 5.1.4 on 2024-12-14 23:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Autor',
            fields=[
                ('id_autor', models.SmallAutoField(primary_key=True, serialize=False)),
                ('nombre_autor', models.CharField(max_length=50, unique=True)),
                ('pseudonimo', models.CharField(blank=True, max_length=50, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Editorial',
            fields=[
                ('id_editorial', models.SmallAutoField(primary_key=True, serialize=False)),
                ('nombre_editorial', models.CharField(max_length=40, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('rut', models.CharField(max_length=12, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('telefono', models.CharField(blank=True, max_length=15, null=True)),
                ('rol', models.PositiveSmallIntegerField(choices=[(1, 'Administrador'), (2, 'Bibliotecario'), (3, 'Recepción'), (4, 'Cliente')], default=4)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Libro',
            fields=[
                ('codigo_libro', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('titulo', models.CharField(max_length=50)),
                ('subtitulo', models.CharField(blank=True, max_length=50, null=True)),
                ('resena', models.TextField(blank=True, null=True)),
                ('categoria', models.PositiveSmallIntegerField(choices=[(1, 'Novela'), (2, 'Poesía'), (3, 'Cuentos'), (4, 'Filosofía'), (5, 'Historia')])),
                ('portada', models.ImageField(blank=True, null=True, upload_to='media/')),
                ('estado_libro', models.PositiveSmallIntegerField(choices=[(1, 'Ingresado'), (2, 'Disponible'), (3, 'Reservado'), (4, 'Prestado'), (5, 'Devuelto'), (6, 'Pendiente'), (7, 'Perdido'), (8, 'En reparación')], default=1)),
                ('editorial', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_app.editorial')),
            ],
        ),
        migrations.CreateModel(
            name='AutorPorLibro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('autor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_app.autor')),
                ('libro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_app.libro')),
            ],
            options={
                'unique_together': {('libro', 'autor')},
            },
        ),
    ]
